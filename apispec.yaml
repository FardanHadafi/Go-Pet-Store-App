openapi: 3.0.0
info:
  title: Simple Pet Store API
  version: 1.0.0
  description: A simple API to manage pets in a pet store with JWT authentication
  contact:
    name: API support
    email: fardanhadafi@example.com
servers:
  - url: http://localhost:3000/api
    description: Development server

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid input
        "409":
          description: User already exists

  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid credentials

  /pets:
    get:
      summary: Get all pets
      description: Returns a list of all pets in the store
      tags:
        - Pets
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

    post:
      summary: Add a new pet
      description: Add a new pet to the store
      tags:
        - Pets
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPet"
      responses:
        "201":
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized

  /pets/{petId}:
    get:
      summary: Get a pet by ID
      description: Returns a single pet by its ID
      tags:
        - Pets
      security:
        - BearerAuth: []
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "401":
          description: Unauthorized
        "404":
          description: Pet not found

    put:
      summary: Update a pet
      description: Update an existing pet's information
      tags:
        - Pets
      security:
        - BearerAuth: []
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPet"
      responses:
        "200":
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "401":
          description: Unauthorized
        "404":
          description: Pet not found

    delete:
      summary: Delete a pet
      description: Remove a pet from the store
      tags:
        - Pets
      security:
        - BearerAuth: []
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Pet deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Pet not found

components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
        - species
        - price
      properties:
        id:
          type: integer
          description: Unique identifier for the pet
          example: 1
        name:
          type: string
          description: Name of the pet
          example: "Fluffy"
        species:
          type: string
          description: Species of the pet
          enum: [dog, cat, bird, fish]
          example: "cat"
        price:
          type: number
          format: float
          description: Price in USD
          minimum: 0
          example: 299.99

    NewPet:
      type: object
      required:
        - name
        - species
        - price
      properties:
        name:
          type: string
          description: Name of the pet
          example: "Fluffy"
        species:
          type: string
          description: Species of the pet
          enum: [dog, cat, bird, fish]
          example: "cat"
        price:
          type: number
          format: float
          description: Price in USD
          minimum: 0
          example: 299.99

    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          example: "john_doe"
        password:
          type: string
          format: password
          example: "securepassword123"
        email:
          type: string
          format: email
          example: "john@example.com"

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "john_doe"
        password:
          type: string
          format: password
          example: "securepassword123"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        username:
          type: string
          example: "john_doe"
        message:
          type: string
          example: "Login successful"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
