openapi: 3.0.0
info:
  title: Simple Pet Store API
  version: 1.1.0
  description: A simple API to manage users and pets with JWT authentication and role-based access (admin/user).
  contact:
    name: API support
    email: fardanhadafi@example.com
servers:
  - url: http://localhost:3000/api
    description: Development server

paths:
  /users/register:
    post:
      summary: Register a new user (admin or normal)
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400": { description: Invalid input }
        "409": { description: User already exists }

  /users/login:
    post:
      summary: Login user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401": { description: Invalid credentials }

  /auth/refresh:
    post:
      summary: Refresh JWT token
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401": { description: Unauthorized }

  /users/{id}:
    get:
      summary: Get user by ID (self or admin)
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserResponse" }
        "403": { description: Forbidden }
        "404": { description: Not found }

    put:
      summary: Update user (self or admin)
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserResponse" }
        "403": { description: Forbidden }
        "404": { description: Not found }

    delete:
      summary: Delete user (self or admin)
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: User deleted }
        "403": { description: Forbidden }
        "404": { description: Not found }

  /users/{id}/password:
    patch:
      summary: Change user password
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    { type: string, example: "Password updated successfully" }
        "400": { description: Invalid input }
        "403": { description: Forbidden }
        "404": { description: Not found }

  /pets:
    get:
      summary: Get pets (self only, paginated)
      tags: [Pets]
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, example: 1 }
        - in: query
          name: limit
          schema: { type: integer, example: 10 }
      responses:
        "200":
          description: List of pets
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Pet" }
    post:
      summary: Add a new pet (self only)
      tags: [Pets]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NewPet" }
      responses:
        "201":
          description: Pet created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Pet" }

  /pets/{petId}:
    get:
      summary: Get a pet by ID (self only)
      tags: [Pets]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: petId
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Pet found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Pet" }
        "404": { description: Not found }

    put:
      summary: Update a pet (self only)
      tags: [Pets]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: petId
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NewPet" }
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Pet" }

    delete:
      summary: Delete a pet (self only)
      tags: [Pets]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: petId
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Deleted successfully }

  /admin/users:
    get:
      summary: Get all users (admin only)
      tags: [Admin]
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/UserResponse" }
        "403": { description: Forbidden }

  /admin/pets:
    get:
      summary: Get all pets (admin only)
      tags: [Admin]
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of all pets
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Pet" }
        "403": { description: Forbidden }

components:
  schemas:
    RegisterRequest:
      type: object
      required: [username, password, email]
      properties:
        username: { type: string, example: "john_doe" }
        password:
          { type: string, format: password, example: "securepassword123" }
        email: { type: string, format: email, example: "john@example.com" }
        role:
          type: string
          enum: [user, admin]
          default: user
          example: user

    UserUpdateRequest:
      type: object
      properties:
        username: { type: string, example: "new_name" }
        email: { type: string, example: "new@example.com" }

    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username: { type: string, example: "john_doe" }
        password:
          { type: string, format: password, example: "securepassword123" }

    ChangePasswordRequest:
      type: object
      required: [old_password, new_password]
      properties:
        old_password: { type: string, format: password, example: "secure123" }
        new_password: { type: string, format: password, example: "newpass456" }

    AuthResponse:
      type: object
      properties:
        token: { type: string }
        username: { type: string }
        role: { type: string }
        message: { type: string }

    UserResponse:
      type: object
      properties:
        id: { type: integer }
        username: { type: string }
        email: { type: string }
        role: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    Pet:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        species: { type: string }
        price: { type: number, format: float }
        created_by: { type: integer }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    NewPet:
      type: object
      required: [name, species, price]
      properties:
        name: { type: string, example: "Fluffy" }
        species: { type: string, example: "cat" }
        price: { type: number, format: float, example: 299.99 }

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
